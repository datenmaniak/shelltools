#!/bin/bash

# ‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
# ‚îÉ Script: nginx-project-manager.sh                        ‚îÉ
# ‚îÉ Autor: Datenmaniak                                      ‚îÉ
# ‚îÉ Descripci√≥n: Gestor modular de proyectos Nginx con      ‚îÉ
# ‚îÉ creaci√≥n, eliminaci√≥n, revisi√≥n y p√°gina anfitriona     ‚îÉ
# ‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ

# üîê Validar privilegios de root
if [ "$EUID" -ne 0 ]; then
  echo "‚õî Este script debe ejecutarse como root (usa sudo)"
  exit 1
fi

if ! command -v jq &> /dev/null; then
  echo "‚ùå El comando 'jq' no est√° instalado. Inst√°lalo con: sudo apt install jq"
  exit 1
fi


# Detectar el directorio real del usuario que invoc√≥ sudo
USER_HOME=$(eval echo "~$SUDO_USER")

echo "üìÅ Directorio de trabajo: $USER_HOME"


# üìÅ Funci√≥n: Generar index.html b√°sico
generar_index_html() {
  local destino="$1"
  cat > "$destino/index.html" <<HTML
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Index generado</title>
  <style>
    body {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      height: 100vh;
      font-size: 2em;
      font-family: sans-serif;
      background-color: #f0f0f0;
    }
    a {
      margin-top: 20px;
      font-size: 0.6em;
      text-decoration: none;
      color: #3366cc;
    }
    a:hover {
      text-decoration: underline;
    }
  </style>
</head>
<body>
  Index generado por script...
  <a href="index.php">Mostrar PHP info</a>
</body>
</html>
HTML
}

# üìÅ Funci√≥n: Generar index.php b√°sico
generar_index_php() {
  local destino="$1"
  echo "<?php phpinfo(); ?>" > "$destino/index.php"
}

# üöÄ Funci√≥n: Crear nuevo proyecto Nginx
crear_proyecto() {
  read -p "Nombre del proyecto: " nombre
  read -p "Ruta absoluta del proyecto: " ruta
  read -p "Puerto a asignar: " puerto

  nombre_sanitizado=$(echo "$nombre" | iconv -f utf8 -t ascii//TRANSLIT | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9]+/-/g' | sed -E 's/^-+|-+$//g')

  if [ ! -d "$ruta" ]; then
    echo "‚ùå La ruta no existe: $ruta"
    return
  fi

  has_html=false
  has_php=false
  [ -f "$ruta/index.html" ] && has_html=true
  [ -f "$ruta/index.php" ] && has_php=true

  if [ "$has_html" = false ] && [ "$has_php" = false ]; then
    echo "‚ö†Ô∏è No se encontr√≥ index.html ni index.php. Generando ambos..."
    generar_index_html "$ruta"
    generar_index_php "$ruta"
    has_html=true
    has_php=true
  fi

  ln_path="/srv/nginx/$nombre_sanitizado"
  ln -s "$ruta" "$ln_path"
  echo "üîó Enlace simb√≥lico creado: $ln_path ‚Üí $ruta"

  if ss -tuln | grep ":$puerto " > /dev/null; then
    echo "‚ùå El puerto $puerto ya est√° en uso"
    return
  fi

  verificar_php_fpm

  conf_path="/etc/nginx/conf.d/$nombre_sanitizado.conf"
  tee "$conf_path" > /dev/null <<EOF
# Proyecto: $nombre

server {
    listen $puerto;
    server_name localhost;

    root $ln_path;
    index index.html index.php;

    location / {
        try_files \$uri \$uri/ $( [ "$has_html" = true ] && echo "/index.html" || echo "/index.php" );
    }

    location ~ \.php\$ {
        include fastcgi_params;
        fastcgi_pass unix:/run/php-fpm/www.sock;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
    }
}
EOF

  echo "üìù Archivo de configuraci√≥n creado: $conf_path"
  nginx -t && systemctl reload nginx && echo "üöÄ Nginx recargado con √©xito"


  # agrega_proyecto_a_hostpage "$nombre" "$puerto"
  agrega_proyecto_a_json "$nombre" "$puerto"


}

# üóëÔ∏è Funci√≥n: Eliminar proyecto
eliminar_proyecto() {
  read -p "Nombre del proyecto a eliminar: " nombre
  nombre_sanitizado=$(echo "$nombre" | iconv -f utf8 -t ascii//TRANSLIT | tr '[:lower:]' '[:lower:]' | sed -E 's/[^a-z0-9]+/-/g' | sed -E 's/^-+|-+$//g')

  rm -f "/etc/nginx/conf.d/$nombre_sanitizado.conf"
  rm -f "/srv/nginx/$nombre_sanitizado"
  echo "üóëÔ∏è Proyecto eliminado: $nombre_sanitizado"
  nginx -t && systemctl reload nginx && echo "üîÑ Nginx recargado"


  # elimina_proyecto_de_hostpage "$nombre"

  elimina_proyecto_de_json "$nombre"


}

# üîç Funci√≥n: Revisar si el proyecto existe
revisar_proyecto() {
  read -p "Nombre del proyecto a revisar: " nombre
  nombre_sanitizado=$(echo "$nombre" | iconv -f utf8 -t ascii//TRANSLIT | tr '[:lower:]' '[:lower:]' | sed -E 's/[^a-z0-9]+/-/g' | sed -E 's/^-+|-+$//g')

  conf="/etc/nginx/conf.d/$nombre_sanitizado.conf"
  enlace="/srv/nginx/$nombre_sanitizado"

  if [ -f "$conf" ] && [ -L "$enlace" ]; then
    echo "‚úÖ El proyecto '$nombre_sanitizado' existe y est√° configurado"
  else
    echo "‚ùå El proyecto '$nombre_sanitizado' no est√° configurado correctamente"
  fi
}

# üß† Funci√≥n: Verificar estado de PHP-FPM
verificar_php_fpm() {
  echo "üîç Verificando estado de PHP-FPM..."
  if ! systemctl is-active --quiet php-fpm; then
    echo "‚ö†Ô∏è PHP-FPM est√° detenido. Intentando iniciar..."
    systemctl start php-fpm
    if systemctl is-active --quiet php-fpm; then
      echo "‚úÖ PHP-FPM iniciado correctamente"
    else
      echo "‚ùå No se pudo iniciar PHP-FPM. Verifica el servicio manualmente."
      exit 1
    fi
  else
    echo "‚úÖ PHP-FPM ya est√° activo"
  fi
}

# üè† Funci√≥n: Crear p√°gina anfitriona HTML
crear_pagina_anfitriona() {
  local ruta_html="$USER_HOME/hostpage/index.html"
  local enlace="/srv/nginx/host"
  local DIRHOST="$USER_HOME/hostpage"

  if [[ -d $DIRHOST ]]; then
    echo "‚úî El directorio de la p√°gina anfitriona ya existe en $DIRHOST"
  else
    sudo -u "$SUDO_USER" mkdir -p "$DIRHOST"
    sudo chown -R "$SUDO_USER":"$SUDO_USER" "$DIRHOST"


    echo "‚úî Creado directorio anfitri√≥n en $DIRHOST"
  fi

  if [[ -f "$ruta_html" ]]; then
    echo "‚úî La p√°gina anfitriona ya existe en $ruta_html"
    return
  fi

  cat > "$ruta_html" <<EOF
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Proyectos Web</title>
  <style>
    body { font-family: sans-serif; background: #1a1a1a; color: #eee; }
    table { width: 100%; border-collapse: collapse; margin-top: 20px; }
    th, td { padding: 10px; border-bottom: 1px solid #444; }
    a { color: #9f5fff; text-decoration: none; }
  </style>
</head>
<body>
  <h1>Proyectos activos</h1>
  <table id="tabla-proyectos">
    <thead><tr><th>Nombre</th><th>Acceso</th></tr></thead>
    <tbody>
      <!-- PROYECTOS -->
    </tbody>
  </table>
</body>
</html>
EOF

  ln -s "$USER_HOME/hostpage" "$enlace"
  echo "‚úî P√°gina anfitriona creada en $ruta_html y enlazada en $enlace"
}

# ‚ûï Funci√≥n: Agregar proyecto a la tabla HTML
agrega_proyecto_a_hostpage() {
  local nombre="$1"
  local puerto="$2"
  local ruta_html="$HOME/hostpage/index.html"

  if [[ ! -f "$ruta_html" ]]; then
    echo "‚ö† La p√°gina anfitriona no existe. Ejecuta primero la opci√≥n para crearla."
    return 1
  fi

  if grep -q "<td>${nombre}</td>" "$ruta_html"; then
    echo "‚Ñπ El proyecto '${nombre}' ya est√° listado en la p√°gina anfitriona."
    return 0
  fi

    local fila="      <tr><td>${nombre}</td><td><a href='http://localhost:${puerto}/' target='_blank'>Abrir</a></td></tr>"
  sed -i "/<!-- PROYECTOS -->/a ${fila}" "$ruta_html"
  echo "‚úî Proyecto '${nombre}' agregado a la p√°gina anfitriona."
}

elimina_proyecto_de_hostpage() {
  local nombre="$1"
  local ruta_html="$HOME/hostpage/index.html"

  if [[ ! -f "$ruta_html" ]]; then
    echo "‚ö† La p√°gina anfitriona no existe."
    return 1
  fi

  sed -i "/<tr><td>${nombre}<\\/td>/d" "$ruta_html"
  echo "üóë Proyecto '${nombre}' eliminado de la p√°gina anfitriona."
}

# üåê Funci√≥n: Crear configuraci√≥n Nginx para la p√°gina anfitriona
crear_configuracion_hostpage() {
  local conf="/etc/nginx/conf.d/hostpage.conf"
  local puerto=1000

  if [[ -f "$conf" ]]; then
    echo "‚úî Configuraci√≥n Nginx para la p√°gina anfitriona ya existe."
    return
  fi

  sudo tee "$conf" > /dev/null <<EOF
server {
    listen ${puerto};
    server_name localhost;

    root /srv/nginx/host;
    index index.html;

    location / {
        try_files \$uri \$uri/ =404;
    }
}
EOF

  sudo nginx -t && sudo systemctl reload nginx
  echo "‚úî P√°gina anfitriona servida en http://localhost:${puerto}/"
}

# üé® Funci√≥n: Generar index.html para la p√°gina anfitriona con estilo Violet Pulse
generar_index_hostpage() {

  crear_json

  local destino="$1"

  cat > "$destino/index.html" <<'EOF'
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Proyectos Web</title>
  <style>
    body {
      font-family: 'Segoe UI', sans-serif;
      margin: 0;
      padding: 0;
      background: linear-gradient(135deg, #f3e8ff, #e0ccff);
      color: #1a1a1a;
    }

    header {
      background-color: #7700F0;
      color: white;
      padding: 1.5rem;
      text-align: center;
      box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }

    h1 {
      margin: 0;
      font-size: 2rem;
    }

    table {
      width: 90%;
      margin: 2rem auto;
      border-collapse: collapse;
      background-color: white;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(119, 0, 240, 0.1);
    }

    th, td {
      padding: 1rem;
      border-bottom: 1px solid #ddd;
      text-align: left;
    }

    th {
      background-color: #a066ff;
      color: white;
    }

    a {
      color: #7700F0;
      text-decoration: none;
      font-weight: bold;
    }

    a:hover {
      text-decoration: underline;
    }
  </style>
</head>
<body>
  <header>
    <h1>Proyectos activos</h1>
  </header>

  <table id="tabla-proyectos">
    <thead><tr><th>Nombre</th><th>Acceso</th></tr></thead>
    <tbody></tbody>
  </table>

  <script>
    fetch('proyectos.json')
      .then(response => response.json())
      .then(data => {
        const tbody = document.querySelector('#tabla-proyectos tbody');
        data.forEach(proyecto => {
          const fila = document.createElement('tr');
          fila.innerHTML = `
            <td>${proyecto.nombre}</td>
            <td><a href="http://localhost:${proyecto.puerto}/" target="_blank">Abrir</a></td>
          `;
          tbody.appendChild(fila);
        });
      });
  </script>
</body>
</html>
EOF
}

#  Crear registros de proyectos
crear_json() {
    DB="$USER_HOME/hostpage/proyectos.json"

    if [[ -f "$DB" ]]; then
    echo "‚úî Base de datos de proyectos Web ya existe."
    return
  fi
  echo "[]" > "$DB"


}

# ‚ûï Funci√≥n: Agregar proyecto a proyectos.json
agrega_proyecto_a_json() {
  local nombre="$1"
  local puerto="$2"
  local json="$USER_HOME/hostpage/proyectos.json"

  # Si no existe, lo inicializa como array vac√≠o
  if [[ ! -f "$json" ]]; then
    echo "[]" > "$json"
  fi

  # Verifica si ya existe
  if jq -e --arg nombre "$nombre" '.[] | select(.nombre == $nombre)' "$json" > /dev/null; then
    echo "‚Ñπ El proyecto '$nombre' ya est√° registrado en proyectos.json"
    return
  fi

  # Agrega el nuevo proyecto
  jq --arg nombre "$nombre" --arg puerto "$puerto" \
    '. += [{"nombre": $nombre, "puerto": ($puerto | tonumber)}]' \
    "$json" > "$json.tmp" && mv "$json.tmp" "$json"

  echo "‚úî Proyecto '$nombre' agregado a proyectos.json"
}

# üóëÔ∏è Funci√≥n: Eliminar proyecto de proyectos.json
elimina_proyecto_de_json() {
  local nombre="$1"
  local json="$USER_HOME/hostpage/proyectos.json"

  if [[ ! -f "$json" ]]; then
    echo "‚ö† proyectos.json no existe."
    return
  fi

  # Elimina el proyecto por nombre
  jq --arg nombre "$nombre" \
    'del(.[] | select(.nombre == $nombre))' \
    "$json" > "$json.tmp" && mv "$json.tmp" "$json"

  echo "üóë Proyecto '$nombre' eliminado de proyectos.json"
}

# üìÑ Funci√≥n: Listar proyectos guardados en proyectos.json
# üìÑ Funci√≥n: Listar proyectos guardados en proyectos.json con validaci√≥n
listar_proyectos_guardados() {
  local json="$USER_HOME/hostpage/proyectos.json"

  if [[ ! -f "$json" ]]; then
    echo "‚ö† No se encontr√≥ el archivo proyectos.json en $USER_HOME/hostpage"
    return 1
  fi

  # Validar que el archivo sea un array JSON v√°lido
  if ! jq empty "$json" 2>/dev/null; then
    echo "‚ùå El archivo proyectos.json est√° corrupto o mal formado."
    read -p "¬øDeseas regenerarlo como lista vac√≠a? [s/N]: " respuesta
    if [[ "$respuesta" =~ ^[sS]$ ]]; then
      echo "[]" > "$json"
      echo "‚úî Archivo proyectos.json regenerado como lista vac√≠a."
    else
      echo "üö´ Operaci√≥n cancelada."
    fi
    return 1
  fi

  # Verificar si est√° vac√≠o
  if [[ $(jq length "$json") -eq 0 ]]; then
    echo "üì≠ No hay proyectos registrados actualmente."
    return 0
  fi

  echo "üì¶ Proyectos registrados:"
  jq -r '.[] | "üîπ \(.nombre) ‚Üí Puerto: \(.puerto)"' "$json"
}

elimina_dir_hostpage() {

  if [[ -d "$USER_HOME/hostpage" ]]; then
       [ "$(ls -A $USER_HOME/hostpage)" ] && echo "Not Empty" || echo "Empty"
       echo "üö´ Operaci√≥n cancelada. Hay archivos, revise el contenido primero.!"
       return
  else
     echo "‚úî Directorio vacio. Eliminado $USER_HOME/hostpage."
     rm -rf "$USER_HOME/hostpage"
  fi
}

while true; do
  echo ""
  echo "üß≠ Men√∫ de gesti√≥n de proyectos Nginx"
  echo "1) Crear proyecto"
  echo "2) Eliminar proyecto"
  echo "3) Revisar si existe"
  echo "4) Crear p√°gina anfitriona centralizada"
  echo "5) Listar proyectos guardados"
  echo "6) Eliminar directorio hostpage"
  echo "0) Salir"
  read -p "Selecciona una opci√≥n [0-4]: " opcion

  case $opcion in
    0) echo "üëã Saliendo..." ; exit 0 ;;
    1) crear_proyecto ;;
    2) eliminar_proyecto ;;
    3) revisar_proyecto;;
    4) crear_pagina_anfitriona
       generar_index_hostpage "$USER_HOME/hostpage"
       crear_configuracion_hostpage ;;
    5) listar_proyectos_guardados ;;
    6) elimina_dir_hostpage;;
    *) echo "‚ùå Opci√≥n inv√°lida" ;;
  esac
done

